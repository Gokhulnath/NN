# -*- coding: utf-8 -*-
"""NN-HW6-q3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ye_OutEegz6RrXg1hl-xoqxYllB2-oR_
"""

import torch
from torch import nn
from torch.utils.data import DataLoader
from torchvision import datasets
from torchvision.transforms import ToTensor

train_data = datasets.MNIST(root='data', train=True, download=True, transform=ToTensor())
test_data = datasets.MNIST(root='data', train=False, download=True, transform=ToTensor())

batch_size = 64
train_dataloader = DataLoader(train_data, batch_size=batch_size, shuffle=True)
test_dataloader = DataLoader(test_data, batch_size=batch_size)

for X, y in test_dataloader:
    print(f"Shape of X [N, C, H, W]: {X.shape}")
    print(f"Shape of y: {y.shape} {y.dtype}")
    break

device = (
    "cuda"
    if torch.cuda.is_available()
    else "mps"
    if torch.backends.mps.is_available()
    else "cpu"
)
print(f"Using {device} device")

class NeuralNetwork(nn.Module):
    def __init__(self):
        super(NeuralNetwork, self).__init__()
        self.fc1 = nn.Linear(784, 200)
        self.fc2 = nn.Linear(200, 200)
        self.fc3 = nn.Linear(200, 10)

    def forward(self, x):
        x = x.view(-1, 784)
        x = torch.relu(self.fc1(x))
        x = torch.relu(self.fc2(x))
        x = self.fc3(x)
        return x

class CNNModel(nn.Module):
    def __init__(self):
        super(CNNModel, self).__init__()
        self.conv1 = nn.Conv2d(in_channels=1, out_channels=20, kernel_size=4, stride=1)
        self.relu1 = nn.ReLU()
        self.conv2 = nn.Conv2d(in_channels=20, out_channels=20, kernel_size=4, stride=2)
        self.relu2 = nn.ReLU()
        self.pool = nn.MaxPool2d(kernel_size=2, stride=2)
        self.fc1 = nn.Linear(20 * 5 * 5, 250)
        self.relu3 = nn.ReLU()
        self.fc2 = nn.Linear(250, 10)

    def forward(self, x):
        x = self.relu1(self.conv1(x))
        x = self.relu2(self.conv2(x))
        x = self.pool(x)
        x = x.view(x.size(0), -1)
        x = self.relu3(self.fc1(x))
        x = self.fc2(x)
        return x

model = CNNModel()

print(model)

def train(dataloader, model, loss_fn, optimizer):
    size = len(dataloader.dataset)
    model.train()
    for batch, (X, y) in enumerate(dataloader):
        X, y = X.to(device), y.to(device)

        # Compute prediction error
        pred = model(X)
        loss = loss_fn(pred, y)

        # Backpropagation
        loss.backward()
        optimizer.step()
        optimizer.zero_grad()

        if batch % 100 == 0:
            loss, current = loss.item(), (batch + 1) * len(X)
            print(f"loss: {loss:>7f}  [{current:>5d}/{size:>5d}]")

def test(dataloader, model, loss_fn):
    size = len(dataloader.dataset)
    num_batches = len(dataloader)
    model.eval()
    test_loss, correct = 0, 0
    with torch.no_grad():
        for X, y in dataloader:
            X, y = X.to(device), y.to(device)
            pred = model(X)
            test_loss += loss_fn(pred, y).item()
            correct += (pred.argmax(1) == y).type(torch.float).sum().item()
    test_loss /= num_batches
    correct /= size
    print(f"Test Error: \n Accuracy: {(100*correct):>0.1f}%, Avg loss: {test_loss:>8f} \n")


learning_rate = 1e-3
num_epochs = 10
loss_fn = nn.CrossEntropyLoss()
optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate)

for t in range(num_epochs):
    print(f"Epoch {t+1}\n-------------------------------")
    train(train_dataloader, model, loss_fn, optimizer)
    test(test_dataloader, model, loss_fn)

print(f"\nHyperparameters:\nLearning Rate: {learning_rate}, Batch Size: {train_dataloader.batch_size}, Epochs: {num_epochs}")

class CNNModelWithDropout(nn.Module):
    def __init__(self):
        super(CNNModelWithDropout, self).__init__()
        self.conv1 = nn.Conv2d(1, 20, kernel_size=4, stride=1)
        self.relu1 = nn.ReLU()

        self.conv2 = nn.Conv2d(20, 20, kernel_size=4, stride=2)
        self.relu2 = nn.ReLU()

        self.pool = nn.MaxPool2d(kernel_size=2, stride=2)

        self.dropout = nn.Dropout(0.5)
        self.fc1 = nn.Linear(20 * 5 * 5, 250)
        self.relu3 = nn.ReLU()

        self.fc2 = nn.Linear(250, 10)

    def forward(self, x):
        x = self.relu1(self.conv1(x))
        x = self.dropout(self.relu2(self.conv2(x)))
        x = self.pool(x)
        x = x.view(x.size(0), -1)
        x = self.dropout(self.relu3(self.fc1(x)))
        x = self.fc2(x)
        return x

model = CNNModelWithDropout()

print(model)

learning_rate = 1e-3
num_epochs = 10
loss_fn = nn.CrossEntropyLoss()
optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate, weight_decay=0.0005)

for t in range(num_epochs):
    print(f"Epoch {t+1}\n-------------------------------")
    train(train_dataloader, model, loss_fn, optimizer)
    test(test_dataloader, model, loss_fn)

print(f"\nHyperparameters:\nLearning Rate: {learning_rate}, Batch Size: {train_dataloader.batch_size}, Epochs: {num_epochs}", Weight Decay: {weight_decay}")

class CNNModelWithBatchNorm(nn.Module):
    def __init__(self):
        super(CNNModelWithBatchNorm, self).__init__()
        self.conv1 = nn.Conv2d(1, 20, kernel_size=4, stride=1)
        self.bn1 = nn.BatchNorm2d(20)
        self.relu1 = nn.ReLU()

        self.conv2 = nn.Conv2d(20, 20, kernel_size=4, stride=2)
        self.bn2 = nn.BatchNorm2d(20)
        self.relu2 = nn.ReLU()

        self.pool = nn.MaxPool2d(kernel_size=2, stride=2)

        self.fc1 = nn.Linear(20 * 5 * 5, 250)
        self.bn3 = nn.BatchNorm1d(250)
        self.relu3 = nn.ReLU()

        self.fc2 = nn.Linear(250, 10)

    def forward(self, x):
        x = self.relu1(self.bn1(self.conv1(x)))
        x = self.relu2(self.bn2(self.conv2(x)))
        x = self.pool(x)
        x = x.view(x.size(0), -1)
        x = self.relu3(self.bn3(self.fc1(x)))
        x = self.fc2(x)
        return x

model = CNNModelWithBatchNorm()

print(model)

learning_rate = 1e-3
num_epochs = 10
loss_fn = nn.CrossEntropyLoss()
optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate, weight_decay=0.0005)

for t in range(num_epochs):
    print(f"Epoch {t+1}\n-------------------------------")
    train(train_dataloader, model, loss_fn, optimizer)
    test(test_dataloader, model, loss_fn)

print(f"\nHyperparameters:\nLearning Rate: {learning_rate}, Batch Size: {train_dataloader.batch_size}, Epochs: {num_epochs}, Weight Decay: {weight_decay}")